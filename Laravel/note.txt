*******Laravel根目錄下********
----目錄----
● app
包含了整個網站大多數的核心程式，所寫的程式大多都會丟進這個資料夾，其中包含了Controller以及Model
● bootstrap
進行laravel的初始化，載入相關程式
	-cache
	用來提升網站運作的效能
● config
設定檔，包含app,database,session, cache, mail...等設定
● database
	-Migration
	建立資料表，並記錄每一次資料表的更新，讓資料庫也可以進行版本控制。
	-Seed
	產生假資料，可以呼叫Factory來大量產生
	-Factory
	負責如何產生假資料的邏輯，然後給Seed使用
● public
專門放公開的檔案，包含網站的index文件，還有CSS, JavaScript, Image等等!
● resources
包含View，也就是網頁前端。其他還有網頁語言檔(可以讓網站顯示不一樣的語言)，以及還沒有被編譯的資源(e.g LESS, SASS…)
● routes
像網路的路由器，裡面有很多路由器，去處理使用者存取網站的要求。最常用到的就是web.php
● storage
包含編譯過後的Blade templates, 檔案式的session, cache以及log紀錄等各式各樣laravel本身產生的檔案
● tests
放自動化測試的程式
● vendor
都是從composer安裝的套件，同時這個資料夾在版本控制時會被排除，不會一起被同步

----檔案----
● .env – 環境設定檔
根據專案開發環境，去給予不同的設定值，其中包含App, Database, Cache, Session, Mail
	-APP 部分(關聯到/config/app.php):
	-> APP_NAME – 專案的名稱
	-> APP_ENV – 專案開發的環境(local / staging)
	-> APP_KEY – 用作加密session, password以及其他重要資料 可以在CLI(命令列介面)使用php artisan key:generate隨機生成
	-> APP_DEBUG – 提供在瀏覽器中顯示詳細的錯誤訊息來進行debug(true / false)
	-> APP_LOG_LEVEL – 要laravel紀錄多詳細的log內容(log會儲存於/storage/logs)(debug / info / notice / warning / error / critical / alert / emergency)
	-> APP_URL – 你專案網站的網址，像是:http://example.com / http://laravel.local，在之後使用url()時便可取得該網址
	
	-DB 部分(關聯到/config/database.php)
	-> DB_CONNECTION – 根據使用的資料庫做設定，MySQL, MongoDB, SQLite, SQL Server…
	-> DB_HOST – 資料庫主機的位置，本機預設為127.0.0.1
	-> DB_PORT – 資料庫主機的port，預設為3306
	-> DB_DATABASE – 資料庫的名稱
	-> DB_USERNAME – 資料庫的帳號
	-> DB_PASSWORD – 資料庫的密碼
● composer.json & composer.lock – 相依套件管理
composer.json就是去描述專案的套件相依性(使用哪些套件)
當需要某個套件的時候，只要在composer.json的require中寫入: "vendor/package": "x.x.x"
然後在CLI執行:composer update
composer會去安裝你指定的套件，並且更新composer.lock檔
composer.lock在每次有套件被安裝或更新時，會紀錄安裝套件的版本，並將這些資訊鎖定在這個檔案中

*******Laravel VS Code 便利套件********
● Laravel 5 Snippets – 讓你敲鍵盤幾下，就寫出laravel的語法片段，開發Speed Up!
● Laravel 5 Blade Snippets – 讓你敲鍵盤幾下，就寫出laravel blade的語法片段，開發Speed Up!
● Laravel Artisan – 讓你可以透過VS Code的指令列，快速執行Laravel Artisan的指令。

*******Laravel 快捷鍵*********
● Ctrl+` -> 呼叫終端機


*******Route 結構*********
★Route::{HTTP verb}($url, $callback);
	HTTP verb: 
	-> GET     – 取得資源
	-> POST    – 新增一筆資源
	-> PUT     – 更新一筆資源
	-> Patch   – 更新一筆資源的部分內容
	-> Delete  – 刪除一筆資源
	-> Options – 取得Server支援的Request Types有哪些
	$url:
	代表接收到的網址，根目錄就是/，登入可能是/login
	$callback:
	代表處理這個要求的方法
範例1:
接收到根目錄('/') 就去取得welcome頁面
Route::get('/', function ()
{
    return view('welcome');
});
也可以寫成
Route::view('/', 'welcome');

範例2:
比較複雜的處理 會轉給Controller
當接到 user/profile 這個網址， route 會去呼叫 UserController 裡面的 showProfile function
Route::get('user/profile', 'UserController@showProfile');

★Route傳遞參數
1.必需參數:
Route::get('post/{id}', 'PostController@show');
2.可選參數:
Route::get('users/{name?}', function ($name = 'Chase')
{
    return 'Hello, I am ' .$name;
});

★Route命名
假設今天的Route
Route::get('post', 'PostController@index);
Route::post('post', 'PostController @create);
可能用 url('/login') 來取網址 但可能會搞混
->幫Route命名
Route::get('post', 'PostController@index')->name('post.index');
Route::post('post', 'PostController@login')->name('post.login');
如此一來 只要在前端用 route('post.index') / route('post.login') 就可以取得網址

★Route Group – Prefixes前綴群組
去群組同樣路徑下的網址
Route::prefix('admin')->group(function ()
{
    Route::get('users', function ()
    {
        //所以網址要是/admin/users才會進來這裡
    });
});

★Route Group – Middleware
把一群Route組起來，經過驗證才可以進入存取
Route::middleware(['member'])->group(function () {
    Route::get('member_center', function () {
        // 經過member middleware驗證後才能進入
    });
});

*******view 結構*********
★view($view_name):
	$view_name
	是要使用的view名字 如welcome.blade.php -> 'welcome'
	
★傳參數給View 
view($view_name, $data):
$data 必須是一個鍵值對應(key/value pairs)的陣列
一個key對應到一個value，在view中可以用 {{$key}} 的方式使用
向如下:’name’對應到’大帥哥’，然後在view中便可用 {{$name}} 去印出’大帥哥’
web.php:
Route::get('/', function () {
    return view('frontend.welcome', ['name' => '大帥哥']);
});
welcome.blade.php:
<div class="title m-b-md">
    很高興見到你，{{$name}}
</div>

★Blade語法(可搭配blade example.txt)
@include($name) – 插入 $name view
@yield($name)   – 等待被繼承後填入內容
@extends($name) – 繼承 $name view
@section($name) – 將內容填入 @yield($name) ，繼承的樣板中必須要有對應的yield

**********DB 結構*********
★原生SQL語法
select:
<?php
namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
class UserController extends Controller
{
    /**
     * 顯示所有應用程式的使用者清單。
     *
     * @return Response
     */
    public function index()
    {
        $users = DB::select('select * from users where active = ?', [1]);
        return view('user.index', ['users' => $users]);
    }
}
透過?進行參數綁定,可防SQL Injection
或可透過命名綁定方式
● select:
	$results = DB::select('select * from users where id = :id', ['id' => 1]);
● Insert:
	DB::insert('insert into users (id, name) values (?, ?)', [1, 'Dayle']);
● Update:
	$affected = DB::update('update users set votes = 100 where name = ?', ['John']);
● Delete:
	$deleted = DB::delete('delete from users');

★Eloquent ORM(Object-Relational Mapping)
將關聯式資料庫映射至物件導向 把資料庫中的資料變成一個物件(class)

★建立Model
透過命令列執行Artisan指令來自動產生Model 產生的Model檔案，預設存放於/app中:
php artisan make:model Product

★使用Model
以Model:Product舉例
 ●	一般存取資料:
<?php
use App\Product;
$products = App\Product::all();
foreach ($products as $product) {
    echo $products->name;
}
 ●	加上where, order
$products = App\Product::where('price', '>', '100') // 取得price>100的products
               ->orderBy('price', 'desc') // 根據price由高到低排列
               ->take(10) // 只取前10筆資料
               ->get();
 ●	Insert語法
<?php
$product = new App\Product;
$product->name = "Latte";
$product->price = 80;
$product->save();
 ●	Update語法
$product = App\Product::find(1); // 取得id (primarykey) = 1的資料
$product->name = "Cappuccino";
$product->price = 90;
$product->save();
 ●	Delete語法
$product= App\Product::find(1);
$product->delete();

★建立資料庫
-產生Migration
在命令列中輸入
php artisan make:migration {action}_{table name}_table //建立migration檔案
--create=[table name] // 會自動幫你產生建立table的Schema
--table=[table name] //會自動幫你產生修改table的Schema
例:
php artisan make:migration create_products_table
php artisan make:migration create_products_table --create=products
php artisan make:migration create_products_table --table=products

-Mirgration結構
class CreateProductsTable extends Migration
{
    public function up()
    {
       // ...
    }
    public function down()
    {
        // ...
    }
}
up被用於新增資料表、欄位、索引到你的資料庫
down被用於回朔up的動作

-建立資料表
要建立資料表，必須把程式寫在up中
例:
public function up()
{
    Schema::create('products', function (Blueprint $table) {
        $table->increments('id');
        $table->string('name');
        $table->text('description');
        $table->unsignedInteger('price');
        $table->timestamps();
    });
}

-執行Mirgrations
●執行所有未完成的migrations:
php artisan migrate
●還原最後的migration動作
php artisan migrate:rollback
●還原指定次數的migration動作
php artisan migrate:rollback --step=5
●還原所有的migrations
php artisan migrate:reset
還原所有的migrations，然後執行migrate的指令
php artisan migrate:refresh
移除資料庫中的所有資料表，然後執行migrate的指令
php artisan migrate:fresh

**********Controller 架構***********
★建立Controller
php artisan make:controller {Controller Name} --{option 1} -- {option 2} ...
例:
php artisan make:controller ProductController 
												--resource   //自動產生好CRUD(Create, Read, Update, Delete)方法(index, create, store, show, ,edit, update, destroy)
												--model=Product  //連結Product Model
★Controller結構
<?php
namespace App\Http\Controllers;        // Controller的命名空間
use Illuminate\Http\Request;           // 使用的類別
class PhotoController extends Controller
{
    // 在這裡面撰寫你的方法
}
★Route轉發要求給Controller
例:
// GET product的要求轉發給ProductController的index方法處理
Route::get('product', 'ProductController@index');
// GET product{id}的要求轉發給ProductController的show方法處理，同時會傳遞參數id
Route::get('product/{id}', 'ProductController@show');
// POST product的要求轉發給ProductController的store方法處理
Route::post('product', 'ProductController@store');
//	轉發所有CRUD要求給指定的Controller
Route::resource('product', 'ProductController');
此行會處理7種不同的要求
Verb		URI						Action	Route Name
GET			/product				index	product.index
GET			/product/create			create	product.create
POST		/product				store	product.store
GET			/product/{photo}		show	product.show
GET			/product/{photo}/edit	edit	product.edit
PUT/PATCH	/product/{photo}		update	product.update
DELETE		/product/{photo}		destroy	product.destroy

有些資源處理要求不要,可以使用only或是except的方式來篩選
Route::resource('product', 'ProductController', ['only' => [
    'index', 'show'
]]);
Route::resource('product', 'ProductController', ['except' => [
    'create', 'store', 'update', 'destroy'
]]);
偽造表單
由於在HTML的Form中只有GET/POST，並沒有PUT, PATCH, DELETE，但Laravel需要去判別要求的種類
所以使用時需要在前端的HTML Form中加入
{{ method_field('PUT') }}
這樣的隱藏input field，這相當於
<input name="_method" type="hidden" value="PUT">